services:
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hello_phoenix_prod
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d hello_phoenix_prod -h 127.0.0.1 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 5s
    networks: [appnet]

  app_blue:
    build: .
    restart: unless-stopped
    environment:
      MIX_ENV: prod
      PHX_SERVER: "true"
      PHX_HOST: "10.10.10.11"
      PHX_PORT: "4000"
      PORT: "4000"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/hello_phoenix_prod"
      SECRET_KEY_BASE: "<HASIL_ASLI_mix phx.gen.secret>"
      ELIXIR_ERL_OPTIONS: "+fnu"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4001:4000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "--max-time", "2", "http://127.0.0.1:4000/health"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s
    networks: [appnet]

  app_green:
    build: .
    restart: unless-stopped
    environment:
      MIX_ENV: prod
      PHX_SERVER: "true"
      PHX_HOST: "10.10.10.11"
      PHX_PORT: "4000"
      PORT: "4000"
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/hello_phoenix_prod"
      SECRET_KEY_BASE: "<HASIL_ASLI_mix phx.gen.secret>"
      ELIXIR_ERL_OPTIONS: "+fnu"
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "4002:4000"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "--max-time", "2", "http://127.0.0.1:4000/health"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s
    networks: [appnet]

  lb:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "4000:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/includes/upstream_target.inc:/etc/nginx/conf.d/upstream_target.inc:ro
    depends_on:
      app_blue:  { condition: service_started }
      app_green: { condition: service_started }
    networks: [appnet]

volumes:
  pgdata:

networks:
  appnet:
    driver: bridge
